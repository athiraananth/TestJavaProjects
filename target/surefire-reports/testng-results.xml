<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="0" total="7" passed="7">
  <reporter-output>
  </reporter-output>
  <suite name="TestSuite" duration-ms="51" started-at="2019-11-16T00:49:08Z" finished-at="2019-11-16T00:49:08Z">
    <groups>
    </groups>
    <test name="mergeSortTest" duration-ms="51" started-at="2019-11-16T00:49:08Z" finished-at="2019-11-16T00:49:08Z">
      <class name="practiceTests.MergeMeetingsTest">
        <test-method status="PASS" signature="mergeMeetingRangeTest_1()[pri:0, instance:practiceTests.MergeMeetingsTest@79698539]" name="mergeMeetingRangeTest_1" duration-ms="24" started-at="2019-11-15T16:49:08Z" finished-at="2019-11-15T16:49:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- mergeMeetingRangeTest_1 -->
        <test-method status="PASS" signature="mergeMeetingRangeNegativeTest_1()[pri:0, instance:practiceTests.MergeMeetingsTest@79698539]" name="mergeMeetingRangeNegativeTest_1" duration-ms="19" started-at="2019-11-15T16:49:08Z" finished-at="2019-11-15T16:49:08Z">
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[Input should have minimum 2 meeting times to merge the Meeting Times]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: Input should have minimum 2 meeting times to merge the Meeting Times
	at mergedMeetingProblem.MergeMeetings.mergeRanges(MergeMeetings.java:13)
	at practiceTests.MergeMeetingsTest.mergeMeetingRangeNegativeTest_1(MergeMeetingsTest.java:71)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- mergeMeetingRangeNegativeTest_1 -->
        <test-method status="PASS" signature="mergeMeetingRangeTest_2()[pri:0, instance:practiceTests.MergeMeetingsTest@79698539]" name="mergeMeetingRangeTest_2" duration-ms="4" started-at="2019-11-15T16:49:08Z" finished-at="2019-11-15T16:49:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- mergeMeetingRangeTest_2 -->
      </class> <!-- practiceTests.MergeMeetingsTest -->
      <class name="practiceTests.TopScoreTests">
        <test-method status="PASS" signature="topScoreTests_2()[pri:0, instance:practiceTests.TopScoreTests@6108b2d7]" name="topScoreTests_2" duration-ms="1" started-at="2019-11-15T16:49:08Z" finished-at="2019-11-15T16:49:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- topScoreTests_2 -->
        <test-method status="PASS" signature="topScoreTests_1()[pri:0, instance:practiceTests.TopScoreTests@6108b2d7]" name="topScoreTests_1" duration-ms="2" started-at="2019-11-15T16:49:08Z" finished-at="2019-11-15T16:49:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- topScoreTests_1 -->
        <test-method status="PASS" signature="topScoreTests_3()[pri:0, instance:practiceTests.TopScoreTests@6108b2d7]" name="topScoreTests_3" duration-ms="1" started-at="2019-11-15T16:49:08Z" finished-at="2019-11-15T16:49:08Z">
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[ UnSorted Scores should have minimum 2 scores to Sort !!]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException:  UnSorted Scores should have minimum 2 scores to Sort !!
	at practiseProblems.TopScores.findTopScores(TopScores.java:12)
	at practiceTests.TopScoreTests.topScoreTests_3(TopScoreTests.java:37)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- topScoreTests_3 -->
        <test-method status="PASS" signature="topScoreTests_4()[pri:0, instance:practiceTests.TopScoreTests@6108b2d7]" name="topScoreTests_4" duration-ms="0" started-at="2019-11-15T16:49:08Z" finished-at="2019-11-15T16:49:08Z">
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[ Highest Possible Score should be 100 !!]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException:  Highest Possible Score should be 100 !!
	at practiseProblems.TopScores.findTopScores(TopScores.java:9)
	at practiceTests.TopScoreTests.topScoreTests_4(TopScoreTests.java:46)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:84)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- topScoreTests_4 -->
      </class> <!-- practiceTests.TopScoreTests -->
    </test> <!-- mergeSortTest -->
  </suite> <!-- TestSuite -->
</testng-results>
